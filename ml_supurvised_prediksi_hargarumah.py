# -*- coding: utf-8 -*-
"""ML_supurvised_prediksi_hargarumah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ImCtlL8zbQMtBiTWTRcafdnVRnXDlyM

### Import Library
Pada tahap ini dilakukan import library utama seperti pandas, numpy, dan scikit-learn untuk manipulasi data dan modelling.
"""

# -*- coding: utf-8 -*-
"""ML_supurvised_prediksi_harga_rumah_final.ipynb

Automatically generated by Colab.

Original file is located at
    [Link ke Colab Anda jika ada, atau hapus baris ini]
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
# from scipy.stats import pointbiserialr, pearsonr # Tidak digunakan secara aktif di output akhir, tapi ada di kode asli

# --- Konfigurasi Tampilan Pandas dan Plot ---
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
plt.style.use('seaborn-v0_8-whitegrid') # Menggunakan style plot yang tersedia

"""Penjelasan:

Baris komentar awal biasanya berisi informasi tentang file dan encoding.
import ...: Bagian ini mengimpor semua pustaka (library) yang dibutuhkan untuk analisis data, manipulasi data, visualisasi, pemodelan, dan evaluasi.
pandas (sebagai pd): Untuk bekerja dengan struktur data tabular (DataFrame).
numpy (sebagai np): Untuk operasi numerik, terutama array.
matplotlib.pyplot (sebagai plt) dan seaborn (sebagai sns): Untuk membuat visualisasi data (grafik, plot).
XGBRegressor: Model machine learning XGBoost untuk tugas regresi.
train_test_split: Untuk membagi dataset menjadi data latih dan data uji.
GridSearchCV: Untuk melakukan pencarian hiperparameter terbaik secara otomatis.
StandardScaler: Untuk melakukan penskalaan fitur.
mean_squared_error, mean_absolute_error, r2_score: Metrik untuk mengevaluasi performa model regresi.
pd.set_option(...): Mengatur opsi tampilan Pandas agar semua kolom ditampilkan dan lebar output disesuaikan.
plt.style.use(...): Mengatur gaya default untuk plot Matplotlib agar terlihat lebih menarik.

### Load Dataset
Data rumah dimuat dari file lokal `DATA RUMAH.xlsx` yang merupakan hasil scraping manual dari beberapa situs properti.
"""

# Ganti dengan path file Anda jika berbeda
file_path = '/content/DATA RUMAH.xlsx'

try:
    df_raw = pd.read_excel(file_path)
    print("Data berhasil dimuat.")
except FileNotFoundError:
    print(f"File '{file_path}' tidak ditemukan. Harap unggah file atau perbaiki path.")
    print("Menggunakan data dummy untuk melanjutkan...")
    # Data dummy jika file tidak ditemukan (untuk demonstrasi)
    data_dummy = {
        'no': range(1, 51), # Menambah jumlah data dummy
        'nama': [f'Rumah Mewah Tipe {chr(65+(i%7))}{i%3+1}' for i in range(50)],
        'harga': np.random.randint(250000000, 3000000000, 50),
        'luas_tanah': np.random.randint(50, 250, 50),
        'luas_bangunan': np.random.randint(35, 200, 50),
        'kamar_tidur': np.random.randint(1, 6, 50),
        'kamar_mandi': np.random.randint(1, 5, 50),
        'garasi': np.random.randint(0, 4, 50) # Memperluas rentang garasi
    }
    df_raw = pd.DataFrame(data_dummy)

print("\nData Awal (5 baris pertama):")
print(df_raw.head())
print(f"\nInformasi Data Awal:")
df_raw.info()
print(f"\nBentuk DataFrame Awal: {df_raw.shape}")

"""### Preprocessing: Rename dan Drop Kolom
Kolom `no` dan `nama_properti` dihapus karena tidak relevan untuk proses modelling. Kolom `harga_rp` diubah menjadi `harga_juta` untuk memudahkan interpretasi.

"""

# Membuat salinan untuk pra-pemrosesan
df = df_raw.copy()

# Mengubah nama kolom agar lebih konsisten
df.columns = ['no', 'nama_properti','harga_rp', 'luas_tanah_m2', 'luas_bangunan_m2', 'kamar_tidur', 'kamar_mandi', 'garasi_mobil']
print("\nData setelah rename kolom (5 baris pertama):")
print(df.head())

# Menghapus kolom 'no' (identifier, tidak relevan untuk model)
if 'no' in df.columns:
    df = df.drop('no', axis=1)

# Menghapus kolom 'nama_properti' (membutuhkan NLP lebih lanjut jika ingin diekstrak, untuk saat ini dihapus)
if 'nama_properti' in df.columns:
    df = df.drop('nama_properti', axis=1)

print("\nData setelah menghapus kolom 'no' dan 'nama_properti' (5 baris pertama):")
print(df.head())

# Penanganan Missing Value
print("\nJumlah Missing Value per Kolom Sebelum Penanganan:")
print(df.isna().sum())

# Contoh strategi imputasi (ganti atau sesuaikan jika perlu)
for col in df.select_dtypes(include=np.number).columns:
    if df[col].isna().any():
        df[col] = df[col].fillna(df[col].median()) # Imputasi dengan median untuk numerik

print("\nJumlah Missing Value per Kolom Setelah Penanganan (Median Imputation):")
print(df.isna().sum())

"""Eksplorasi Data dan Visualisasi (EDA)"""

print("\nStatistik Deskriptif Data Bersih:")
print(df.describe())

# Visualisasi Distribusi Fitur Numerik
numerical_features = df.select_dtypes(include=np.number).columns
plt.figure(figsize=(18, 12))
for i, col in enumerate(numerical_features):
    plt.subplot(3, 3, i + 1) # Sesuaikan grid jika jumlah fitur berubah
    sns.histplot(df[col], kde=True, bins=20)
    plt.title(f'Distribusi {col}', fontsize=10)
    plt.xlabel(col, fontsize=8)
    plt.ylabel('Frekuensi', fontsize=8)
plt.tight_layout(pad=2.0)
plt.suptitle('Distribusi Fitur Numerik', fontsize=16, y=1.02)
plt.show()

# Visualisasi Box Plot untuk melihat outlier
plt.figure(figsize=(18, 12))
for i, col in enumerate(numerical_features):
    plt.subplot(3, 3, i + 1)
    sns.boxplot(y=df[col])
    plt.title(f'Box Plot {col}', fontsize=10)
    plt.ylabel(col, fontsize=8)
plt.tight_layout(pad=2.0)
plt.suptitle('Box Plot Fitur Numerik (Identifikasi Outlier)', fontsize=16, y=1.02)
plt.show()

"""Feature Engineering"""

# Mengubah harga menjadi satuan juta Rupiah (target variable)
df['harga_juta'] = df['harga_rp'] / 1000000
df = df.drop('harga_rp', axis=1) # Menghapus kolom harga asli

# Membuat fitur kategori berdasarkan kuantil luas tanah
q_luas_tanah = df['luas_tanah_m2'].quantile([0.25, 0.5, 0.75])

def kategorisasi_luas(area, quantiles):
    if area <= quantiles[0.25]:
        return 0 # 'kurang luas'
    elif area <= quantiles[0.50]:
        return 1 # 'sedang'
    else: # area > quantiles[0.50] (karena quantile 0.75 tidak digunakan sebagai batas atas 'sedang')
        return 2 # 'luas'

df['kategori_luas_tanah'] = df['luas_tanah_m2'].apply(lambda x: kategorisasi_luas(x, q_luas_tanah))

# Contoh fitur rasio (opsional, bisa dieksplorasi lebih lanjut)
# df['rasio_bangunan_tanah'] = df['luas_bangunan_m2'] / (df['luas_tanah_m2'] + 1e-6) # +1e-6 untuk menghindari pembagian dengan nol

print("\nData setelah Feature Engineering (5 baris pertama):")
print(df.head())
df.info()

"""Seleksi Fitur dan Analisis Korelasi"""

# Heatmap Korelasi (termasuk target)
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Heatmap Korelasi Antar Fitur (Termasuk Target)', fontsize=14)
plt.show()

# Memisahkan Fitur (X) dan Target (y)
X = df.drop('harga_juta', axis=1)
y = df['harga_juta']

print("\nFitur yang Digunakan (X):")
print(X.columns.tolist())
print("\nTarget (y):")
print(y.name)

"""### Split Data dan Normalisasi
Dataset dibagi menjadi data latih dan uji. Kemudian, fitur numerik diskalakan menggunakan `StandardScaler` untuk meningkatkan performa model.

"""

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nUkuran x_train: {x_train.shape}, x_test: {x_test.shape}")
print(f"Ukuran y_train: {y_train.shape}, y_test: {y_test.shape}")

"""Penskalaan Fitur Numerik"""

# Kolom 'kategori_luas_tanah' sudah berupa ordinal (0, 1, 2), bisa di-scale atau tidak.
# Untuk konsistensi dengan fitur numerik lain, kita akan scale.
numerical_cols_to_scale = X.select_dtypes(include=np.number).columns

scaler = StandardScaler()
X[numerical_cols_to_scale] = scaler.fit_transform(X[numerical_cols_to_scale])

print("\nData Fitur (X) setelah scaling (5 baris pertama):")
print(X.head())

"""### Modeling dengan XGBoost
Model regresi XGBoost digunakan karena kemampuannya menangani data tabular dengan baik dan fitur regularisasi yang membantu menghindari overfitting.

"""

print("\nMemulai Penyetelan Hiperparameter XGBoost dengan GridSearchCV...")

# Definisikan model XGBoost
xgb_model = XGBRegressor(random_state=42, objective='reg:squarederror', early_stopping_rounds=10)

# Definisikan grid parameter untuk GridSearchCV
param_grid = {
    'n_estimators': [100, 200, 300],       # Jumlah pohon
    'learning_rate': [0.01, 0.05, 0.1],   # Laju pembelajaran
    'max_depth': [3, 5, 7],               # Kedalaman maksimum pohon
    'colsample_bytree': [0.7, 0.8, 1.0],  # Persentase fitur yang digunakan per pohon
    'subsample': [0.7, 0.8, 1.0],         # Persentase sampel yang digunakan per pohon
}

# Pisahkan sebagian data training untuk validasi pada early stopping di GridSearchCV
x_train_for_grid, x_val_for_grid, y_train_for_grid, y_val_for_grid = train_test_split(
    x_train, y_train, test_size=0.2, random_state=42
)

grid_search = GridSearchCV(estimator=xgb_model,
                           param_grid=param_grid,
                           cv=3,
                           scoring='neg_mean_squared_error',
                           verbose=1,
                           n_jobs=-1)

grid_search.fit(x_train_for_grid, y_train_for_grid,
                eval_set=[(x_val_for_grid, y_val_for_grid)])

print(f"\nParameter Terbaik Ditemukan: {grid_search.best_params_}")
print(f"Skor CV (Negative MSE) Terbaik: {grid_search.best_score_:.4f}")

best_xgboost_model = grid_search.best_estimator_

"""### Evaluasi Model
Evaluasi dilakukan menggunakan R2 Score, MAE, MSE, dan RMSE pada data training dan testing.

"""

# Fungsi untuk evaluasi model
def evaluate_model(model, x_data, y_data, dataset_name=""):
    y_pred = model.predict(x_data)
    r2 = r2_score(y_data, y_pred)
    mae = mean_absolute_error(y_data, y_pred)
    mse = mean_squared_error(y_data, y_pred)
    rmse = np.sqrt(mse)
    print(f"Evaluasi pada {dataset_name}:")
    print(f'  R2 Score: {r2:.4f}')
    print(f'  MAE: {mae:.4f} (juta Rp)')
    print(f'  MSE: {mse:.4f}')
    print(f'  RMSE: {rmse:.4f} (juta Rp)')
    return y_pred

# Evaluasi pada data training
print("\n--- Evaluasi Model pada Data Training ---")
y_pred_train = evaluate_model(best_xgboost_model, x_train, y_train, "Training Set")

# Evaluasi pada data testing
print("\n--- Evaluasi Model pada Data Testing ---")
y_pred_test = evaluate_model(best_xgboost_model, x_test, y_test, "Testing Set")

"""Visualisasi Hasil Prediksi"""

# Plot Prediksi vs Aktual untuk Testing Set
plt.figure(figsize=(10, 7))
plt.scatter(y_test, y_pred_test, alpha=0.6, edgecolors='k', c='royalblue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2, label='Garis Ideal (Prediksi = Aktual)')
plt.xlabel('Harga Aktual (juta Rp)', fontsize=12)
plt.ylabel('Harga Prediksi (juta Rp)', fontsize=12)
plt.title('Harga Aktual vs. Prediksi Harga (Testing Set)', fontsize=14)
plt.legend()
plt.grid(True)
plt.show()

# Plot Residual
residuals = y_test - y_pred_test
plt.figure(figsize=(10, 7))
sns.histplot(residuals, kde=True, bins=20, color='seagreen')
plt.axvline(residuals.mean(), color='r', linestyle='dashed', linewidth=1.5, label=f'Mean Residual: {residuals.mean():.2f}')
plt.xlabel('Residual (Aktual - Prediksi) (juta Rp)', fontsize=12)
plt.ylabel('Frekuensi', fontsize=12)
plt.title('Distribusi Residual (Testing Set)', fontsize=14)
plt.legend()
plt.grid(True)
plt.show()

"""Pentingnya Fitur (Feature Importance)"""

if hasattr(best_xgboost_model, 'feature_importances_'):
    importances = best_xgboost_model.feature_importances_
    feature_names = X.columns
    feature_importance_df = pd.DataFrame({'Fitur': feature_names, 'Pentingnya': importances})
    feature_importance_df = feature_importance_df.sort_values(by='Pentingnya', ascending=False)

    plt.figure(figsize=(12, 8))
    sns.barplot(x='Pentingnya', y='Fitur', data=feature_importance_df, palette='viridis')
    plt.title('Pentingnya Fitur dari Model XGBoost Terbaik', fontsize=14)
    plt.xlabel('Pentingnya', fontsize=12)
    plt.ylabel('Fitur', fontsize=12)
    plt.grid(axis='x')
    plt.show()

    print("\nPentingnya Fitur (dari yang paling penting):")
    print(feature_importance_df)
else:
    print("\nModel terbaik tidak memiliki atribut 'feature_importances_'.")

"""DataFrame Prediksi Final"""

prediksi_final_df = pd.DataFrame({
    'harga_aktual_juta': y_test.values,
    'harga_prediksi_juta': y_pred_test
})
prediksi_final_df['selisih_juta'] = prediksi_final_df['harga_aktual_juta'] - prediksi_final_df['harga_prediksi_juta']
prediksi_final_df['persentase_error'] = (np.abs(prediksi_final_df['selisih_juta']) / prediksi_final_df['harga_aktual_juta']) * 100

print("\nContoh Hasil Prediksi pada Data Test (dengan selisih dan % error):")
print(prediksi_final_df.head(10))

print("\nStatistik Deskriptif Persentase Error:")
print(prediksi_final_df['persentase_error'].describe())

print("\n--- Proses Selesai ---")